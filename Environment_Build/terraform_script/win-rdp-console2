#! /bin/bash
#timesyncd attempts to reach out to ntp.ubuntu.com but hangs because it gets not response, this will speed up overall loadtime.
#systemctl stop systemd-timesyncd
#systemctl disable systemd-timesyncd
# waits for proxy to be up and logs to script.test
#echo "begin proxy test" >> script.test
#response=\$$(sudo http_proxy=http://tstark:pssecrocks@172.31.245.222:8888 curl --write-out '%%{http_code}' --silent --output /dev/null www.google.com)
#while [ \$$response -ne "200" ]; do
#    echo \$$response >> script.test
#    sleep 10
#    response=\$$(sudo http_proxy=http://tstark:pssecrocks@172.31.245.222:8888 curl --write-out '%%{http_code}' --silent --output /dev/null www.google.com)
#done
#once a positive 200 response is provided throughthe proxy to google, the peaceinourtime file is reated in the home folder. Note that the other files are created in the root folder.
#echo "success">> /home/ubuntu/peaceinourtime

#beware of the need to escape characters that terraform uses. https://www.terraform.io/docs/configuration/expressions/strings.html
#fun fact the http://169.254.169.254 address for the box has the userdata and meta data!.

<powershell>
#reboot checking!
$rcheck = test-path c:\rcount
if ($rcheck -eq $False) 
{
    $rcount = 0
    $rcount | out-file c:\rcount
}

function cred_init()
{


$message2 = "${win_rdp_password}"; $message2 |out-file -append c:/peaceinourtime.txt

#Establish Proxy Credentials
$global:puser = 'tstark'
$global:ppass = 'pssecrocks'
$global:psecpasswd = ConvertTo-SecureString $ppass -AsPlainText -Force
$global:proxy_credential = New-Object System.Management.Automation.PSCredential($puser, $psecpasswd)
[system.net.webrequest]::DefaultWebProxy = new-object system.net.webproxy('http://172.31.245.222:8888')
$global:webclient = New-Object System.Net.webclient
$global:webclient.Proxy.Credentials = $proxy_credential
#Establish local system credentails
$global:luser = "Administrator"
$global:lpass = "${win_rdp_password}"
$global:lsecpasswd = ConvertTo-SecureString $lpass -AsPlainText -Force
$global:local_credential = New-Object System.Management.Automation.PSCredential($luser, $lsecpasswd)
$global:local_credential
}

function Disable-ieESC
{
    $AdminKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}\”
    $UserKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}\” 
    Set-ItemProperty -Path $AdminKey -Name “IsInstalled” -Value 0
    Set-ItemProperty -Path $UserKey -Name “IsInstalled” -Value 0
    #Stop-Process -Name Explorer
    Write-Host “IE Enhanced Security Configuration (ESC) has been disabled.” -ForegroundColor Green
    }

function Disable-ServerManager {
    New-ItemProperty -Path HKCU:\Software\Microsoft\ServerManager -Name DoNotOpenServerManagerAtLogon -PropertyType DWORD -Value “0x1” –Force
}

function rcount_check()
{
    $rcount = get-content c:\rcount
    return $rcount
}

function rcount_inc()
{
    [int]$rcount = get-content c:\rcount
    $rcount++
    $rcount | out-file c:\rcount
}

function key_set () {
    $path = "c:\programdata\amazon\lab-key"
    icacls.exe $path /reset
    icacls.exe $path /inheritance:r
    icacls.exe $path /GRANT "$($env:USERNAME):(R)"
    icacls.exe $path /remove BUILTIN\\BUILTIN
    $env:USERNAME >> "c:\username"
}

function key_pull () {
    #must have cred_init ran prior to running this function in the same boot session!
    #set stattus via scp
    invoke-webrequest -proxy http://172.31.245.222:8888 -proxyCredential $proxy_credential -uri https://securitylab-${guac_auth_password}.s3-us-west-2.amazonaws.com/lab-key -outfile "c:\programdata\amazon\lab-key"
    #this!
    #how to fix lab permissions :()
}

function status_update ($s,$name) {
    #Dependencies:
    # - key_pull
    # - cred_init
    $status = $s
    $status | out-file "c:\$name-status"
    $path = "c:\programdata\amazon\lab-key" 
    scp -i $path -oStrictHostKeyChecking=no "c:\$name-status" ubuntu@172.31.245.222:/home/ubuntu/$name-status     
}

##proxy check
#boot 0 rcount check for 0 for init
$r = rcount_check
if ($r -eq 0)
{
    
    $message2 = "${win_rdp_password}"; $message2 |out-file -append c:/peaceinourtime.txt

    Disable-ieESC
    $message3 = "IE Enhanced Security Disabled"; $message3 | out-file c:/peaceinourtime.txt -append;
    
    Disable-ServerManager
    
    #validated works
    $user = 'tstark'
    $pass = 'pssecrocks'
    $secpasswd = ConvertTo-SecureString $pass -AsPlainText -Force
    $credential = New-Object System.Management.Automation.PSCredential($user, $secpasswd)
    #need if 200 or retry logic then move on
    invoke-webrequest -Proxy http://172.31.245.222:8888 -uri https://chocolatey.org/install.ps1 -Verbose -ProxyCredential $credential -OutFile install.ps1

    ###
    $env:chocolateyProxyLocation='http://tstark:pssecrocks@172.31.245.222:8888'
    $env:chocolateyProxyPassword='pssecrocks'
    $env:chocolateyProxyUser='tstark'

    ./install.ps1

    choco install git -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    choco install pwsh -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    choco install vscode -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    choco install vscode-powershell -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    
    #git https:/github.com/pluralsight/ps-lav -recursive

    [system.net.webrequest]::DefaultWebProxy = new-object system.net.webproxy('http://172.31.245.222:8888')
    $webclient = New-Object System.Net.webclient
    $webclient.Proxy.Credentials = $credential
    #update-help 
    cred_init
    key_pull
    key_set
    status_update 0 dc01
    ###Setup stuff we want to run like settingup add or any of that
    #enable session proxy for objects that require [system.net.webrequest] and no proxy options
    #initiates reboot 1 so first inc rcount
    rcount_inc
    #rename computer
    Rename-Computer -NewName "DC01" -Restart
}elseif ($r -eq 1)
#rcount 1 after reboot 1 actions
{

    Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools

    $pass = "${win_rdp_password}"
    $secpasswd = ConvertTo-SecureString $pass -AsPlainText -Force

    #increment rcount before rebot from ad install
    rcount_inc
    $env:USERNAME >> "c:\username"
    Install-ADDSForest -DomainName "company.co" -DatabasePath "C:\Windows\NTDS" -DomainMode "7" -InstallDns:$true -LogPath "C:\Windows\NTDS"  -SysvolPath "C:\Windows\SYSVOL" -Force:$true -SafeModeAdministratorPassword $secpasswd -norebootoncompletion:$true 
    
    restart-computer -force
}elseif ($r -eq 2)
#recount boot 2 actions
{
    #Add DNS record for Client01 & Client02
    Add-DnsServerResourceRecordA -ZoneName company.co -Name client01 -IPv4Address 172.31.24.5
    Add-DnsServerResourceRecordA -ZoneName company.co -Name client02 -IPv4Address 172.31.24.15
    
    #pop a file over the c$ so the client knows it can join the domain now :) #may need to write a test connection in here to make sure it isn't missing.
    #can import from list in github once that is setup! I have code lying around for that somewhere :) Oh and this way we could create a whole commond AD dataset! YAAAS lets do that.
    #Added psadmin and felixb users
    $setpass = ConvertTo-SecureString "P@ssW0rD!" -AsPlainText -Force
    New-ADUser -Path 'CN=Users,DC=company,DC=co' -SamAccountName psadmin -Name psadmin -Surname Admin -GivenName PowerShell -UserPrincipalName psadmin@company.co -AccountPassword $setpass -ChangePasswordAtLogon $false -Enabled $True
    New-ADUser -Path 'CN=Users,DC=company,DC=co' -SamAccountName felixb -Name felixb -Surname Felix -GivenName Bender -UserPrincipalName felixb@company.co -AccountPassword $setpass -ChangePasswordAtLogon $false -Enabled $True
    
    #Existing Users
    new-aduser M.Bender 
    new-aduser A.Alstair
    new-aduser T.Stark
    new-aduser B.Banner
    new-aduser N.Tesla
    $message = "iambecomedeath"; $message | out-file c:/peaceinourtime.txt -append;
    
    # Create LAB_FILES directory
    $gitlist = “-c http.proxy=http://tstark:pssecrocks@172.31.245.222:8888 clone https://github.com/ps-interactive/lab_powershell_getting_started.git c:\Users\Administrator\Desktop\lab_powershell_getting_started”
    start-process  -filepath ‘C:\Program Files\git\bin\git.exe’ -argumentlist $gitlist -wait
    copy-item -recurse ‘c:\Users\Administrator\Desktop\lab_powershell_getting_started\LAB_FILES\’ -destination ‘c:\Users\Administrator\Desktop\’
    remove-item -recurse -force c:\Users\Administrator\Desktop\lab_powershell_getting_started
    remove-item “c:\Users\Administrator\Desktop\EC2 Microsoft Windows Guide.website”
    remove-item “c:\Users\Administrator\Desktop\EC2 Feedback.website”

    # Create Shared Directory
    New-Item -ItemType Directory -Name "Shared" -Path "C:\demos"
    New-SmbShare -Path "c:\demos\shared" -FullAccess "company\administrator","administrators" -ChangeAccess "everyone","users" -name "Shared"
    expand-archive -literalpath "c:\Users\Administrator\Desktop\LAB_FILES\shareddirectory.zip" -destinationpath c:\demos\shared\
    
    # Create links
    # Windows PowerShell link
        $TargetFile = "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe"
        $ShortcutFile = "C:\Users\Public\Desktop\Windows PowerShell (x64).lnk"
        $WScriptShell = New-Object -ComObject WScript.Shell
        $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
        $Shortcut.TargetPath = $TargetFile
        $Shortcut.IconLocation = "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe"
        $Shortcut.Save()
        #$Host.UI.RawUI.BackgroundColor = 'DarkBlue'

    # Windows PowerShell ISE link
        $TargetFile = "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell_ISE.exe"
        $ShortcutFile = "C:\Users\Public\Desktop\Windows PowerShell ISE(x64).lnk"
        $WScriptShell = New-Object -ComObject WScript.Shell
        $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
        $Shortcut.TargetPath = $TargetFile
        $Shortcut.IconLocation = "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell_ise.exe"
        $Shortcut.Save()
        
    # PowerShell 7 link
        $TargetFile = "C:\Program Files\PowerShell\7\pwsh.exe"
        $ShortcutFile = "C:\Users\Public\Desktop\Powershell 7(x64).lnk"
        $WScriptShell = New-Object -ComObject WScript.Shell
        $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
        $Shortcut.TargetPath = $TargetFile
        $Shortcut.IconLocation = "C:\Program Files\PowerShell\7\pwsh.exe"
        $Shortcut.Save()

    # Command Prompt link
        $TargetFile = "%windir%\system32\cmd.exe"
        $ShortcutFile = "C:\Users\Public\Desktop\Command Prompt.lnk"
        $WScriptShell = New-Object -ComObject WScript.Shell
        $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
        $Shortcut.TargetPath = $TargetFile
        $Shortcut.IconLocation = "%windir%\system32\cmd.exe"
        $Shortcut.Save()

    rcount_inc
    
    cred_init
    
    #$path = "c:\programdata\amazon\lab-key"
    #icacls.exe $path /reset
    #icacls.exe $path /inheritance:r
    #icacls.exe $path /GRANT "COMPANY\Administrator:(R)"
    #icacls.exe $path /remove BUILTIN\\BUILTIN
    key_set
    $env:USERNAME >> "c:\username"

    cred_init
    status_update 1 dc01
    #start-process -verbose scp -ArgumentList "-oStrictHostKeyChecking=no -i C:\programdata\Amazon\lab-key  c:\dc01-status ubuntu@172.31.245.222:/home/ubuntu/dc01-status" -runas $local_credential -wait
    net user Administrator ${win_rdp_password}
    #$message2 = "${win_rdp_password}"
    #$message2 |out-file -append c:/lab_files/companypw.txt
}

###
##Installing things with choco with explicit proxy test is with wireshark
#choco install nmap -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
#thats it should install
#Pulling in demo files over git requires git install
#Domain Controller
#$dcService = Get-WindowsFeature
#if ($dcService = $false)
# var for random string windows-pw

</powershell>
<persist>true</persist>