#####Client02 Console Script####
#! /bin/bash
#timesyncd attempts to reach out to ntp.ubuntu.com but hangs because it gets not response, this will speed up overall loadtime.
#systemctl stop systemd-timesyncd
#systemctl disable systemd-timesyncd
# waits for proxy to be up and logs to script.test
#echo "begin proxy test" >> script.test
#response=\$$(sudo http_proxy=http://tstark:pssecrocks@172.31.245.222:8888 curl --write-out '%%{http_code}' --silent --output /dev/null www.google.com)
#while [ \$$response -ne "200" ]; do
#    echo \$$response >> script.test
#    sleep 10
#    response=\$$(sudo http_proxy=http://tstark:pssecrocks@172.31.245.222:8888 curl --write-out '%%{http_code}' --silent --output /dev/null www.google.com)
#done
#once a positive 200 response is provided throughthe proxy to google, the peaceinourtime file is reated in the home folder. Note that the other files are created in the root folder.
#echo "success">> /home/ubuntu/peaceinourtime



#beware of the need to escape characters that terraform uses. https://www.terraform.io/docs/configuration/expressions/strings.html


<powershell>

$rcheck = test-path c:\rcount
if ($rcheck -eq $False) 
{
    $rcount = 0
    $rcount | out-file c:\rcount
}

function rcount_check()
{
    $rcount = get-content c:\rcount
    return $rcount
}

function rcount_inc()
{
    [int]$rcount = get-content c:\rcount
    $rcount++
    $rcount | out-file c:\rcount
}

function cred_init()
{

net user Administrator ${win_rdp_password}
$message2 = "${win_rdp_password}"; $message2 |out-file -append c:/peaceinourtime.txt

#Establish Proxy Credentials
$global:puser = 'tstark'
$global:ppass = 'pssecrocks'
$global:psecpasswd = ConvertTo-SecureString $ppass -AsPlainText -Force
$global:proxy_credential = New-Object System.Management.Automation.PSCredential($puser, $psecpasswd)
[system.net.webrequest]::DefaultWebProxy = new-object system.net.webproxy('http://172.31.245.222:8888')
$global:webclient = New-Object System.Net.webclient
$global:webclient.Proxy.Credentials = $proxy_credential
#Establish local system credentails
$global:luser = "Administrator"
$global:lpass = "${win_rdp_password}"
$global:lsecpasswd = ConvertTo-SecureString $lpass -AsPlainText -Force
$global:local_credential = New-Object System.Management.Automation.PSCredential($luser, $lsecpasswd)
$global:local_credential
}

#disable web protection
function Disable-ieESC
{
$AdminKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}\”
$UserKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}\” 
Set-ItemProperty -Path $AdminKey -Name “IsInstalled” -Value 0
Set-ItemProperty -Path $UserKey -Name “IsInstalled” -Value 0
Stop-Process -Name Explorer
Write-Host “IE Enhanced Security Configuration (ESC) has been disabled.” -ForegroundColor Green
$message3 = "IE Enhanced Security Disabled"; $message3 | out-file c:/peaceinourtime.txt -append;
}

function key_pull () {
    #must have cred_init ran prior to running this function in the same boot session!
    #set stattus via scp
    invoke-webrequest -proxy http://172.31.245.222:8888 -proxyCredential $proxy_credential -uri https://securitylab-${guac_auth_password}.s3-us-west-2.amazonaws.com/lab-key -outfile "c:\programdata\amazon\lab-key"
    $path = "c:\programdata\amazon\lab-key"
    #this!
    icacls.exe $path /reset
    icacls.exe $path /inheritance:r
    icacls.exe $path /GRANT "$($env:USERNAME):(R)"
    icacls.exe $path /remove BUILTIN\\BUILTIN
    #how to fix lab permissions :()
}

function status_update ($s,$name) {
    #Dependencies:
    # - key_pull
    # - cred_init
    $path = "c:\programdata\amazon\lab-key"
    $status = $s
    $status | out-file "c:\$name-status"
    scp -i $path -oStrictHostKeyChecking=no "c:\$name-status" ubuntu@172.31.245.222:/home/ubuntu/$name-status     
}

function status_check ($name) {
    $path = "c:\programdata\amazon\lab-key"
    scp -i $path -oStrictHostKeyChecking=no  ubuntu@172.31.245.222:/home/ubuntu/$name-status "c:\$name-status"
    $status = get-content "c:\$name-status"
    return $status
}

#MAIN!
$r = rcount_check

if ($r -eq 0)
{
cred_init
key_pull
status_update 0 "client01"

Disable-ieESC

Start=transcript -path "C:\transcripts\transcriptMain.txt" -NoClobber
New-NetFirewallRule -DisplayName "Allow Inbound From DC" -Direction Inbound -LocalPort 445 -Protocol TCP -Action Allow

#chocolate install
#need if 200 or retry logic then move on
invoke-webrequest -Proxy http://172.31.245.222:8888 -uri https://chocolatey.org/install.ps1 -Verbose -ProxyCredential $Global:proxy_credential -OutFile install.ps1

###
$env:chocolateyProxyLocation='http://tstark:pssecrocks@172.31.245.222:8888'
$env:chocolateyProxyPassword='pssecrocks'
$env:chocolateyProxyUser='tstark'

./install.ps1

#services install
##Installing things with choco with explicit proxy test is with wireshark
    choco install git -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    choco install pwsh -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    choco install vscode -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    choco install vscode-powershell -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"

#Add vscode extension
code --install-extension ms-vscode.powershell

#update-help in PowerShell
update-help -force
pwsh -command {update-help -force}

# Add RSAT
Get-WindowsFeature -Name *RSAT* | Install-windowsfeature

#Download LAB_Files
$gitlist = “-c http.proxy=http://tstark:pssecrocks@172.31.245.222:8888 clone https://github.com/ps-interactive/lab_powershell_getting_started.git c:\Users\Administrator\Desktop\lab_powershell_getting_started”
start-process  -filepath ‘C:\Program Files\git\bin\git.exe’ -argumentlist $gitlist -wait
copy-item -recurse ‘c:\Users\Administrator\Desktop\lab_powershell_getting_started\LAB_FILES\’ -destination ‘c:\Users\Administrator\Desktop\’
remove-item -recurse -force c:\Users\Administrator\Desktop\lab_powershell_getting_started
remove-item “c:\Users\Administrator\Desktop\EC2 Microsoft Windows Guide.website”
remove-item “c:\Users\Administrator\Desktop\EC2 Feedback.website”

# Create links
# Windows PowerShell link
TargetFile = "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe”"
$ShortcutFile = "C:\Users\Public\Desktop\Windows PowerShell (x64).lnk"
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
$Shortcut.TargetPath = $TargetFile
$Shortcut.IconLocation = "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe"
$Shortcut.Save()
$Host.UI.RawUI.BackgroundColor = 'DarkBlue'

# PowerShell 7 link
$TargetFile = "C:\Program Files\PowerShell\7\pwsh.exe"
$ShortcutFile = "C:\Users\Public\Desktop\Powershell 7(x64).lnk"
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
$Shortcut.TargetPath = $TargetFile
$Shortcut.IconLocation = "C:\Program Files\PowerShell\7\pwsh.exe"
$Shortcut.Save()

remove-item "c:\Users\Administrator\Desktop\EC2 Microsoft Windows Guide.website"
remove-item "c:\Users\Administrator\Desktop\EC2 Feedback.website"

$ifindex = get-netipinterface -addressfamily IPv4 -interfaceAlias Ethernet
$ifindex = $ifindex.ifindex
set-dnsclientserveraddress -interfaceindex $ifindex -serverAddresses ("172.31.24.10","172.31.24.1")
Set-DnsClient -InterfaceIndex $ifindex -ConnectionSpecificSuffix "company.co"
Set-DnsClientGlobalSetting -SuffixSearchList @("company.co", "us-west-2.ec2-utilities.amazonaws.com")
rename-computer -NewName client01 -verbose | out-file "c:\computer-add.txt" -append
Stop-transcript

rcount_inc

Restart-Computer -force

}
                                                                              
elseif($r -eq 1){
    Start-transcript -path "C:\transcripts\transcriptDCJoin.txt" -NoClobber
      #check for DC01 rcount 3
    $dc_status=0
    $t=0
    status_check dc01
    while ($dc_status -ne 1){
        $name = "dc01"
        $dc_status = get-content "c:\dc01-status"
        $t++
        $t |out-file c:\time
        $dc_status | out-file "c:\status-check"
        start-sleep -s 60
        }
        # removed status check code
        # replace with start-sleep
  
    add-computer -domain company.co -server DC01 -credential $credential -force -verbose | out-file "c:\computer-add" -append
    rcount_inc
    Stop-transcript
    restart-computer
    }

elseif($r -eq 2){
    $message4 = "happy hunting"; $message4 |out-file 'c:\peaceinourtime' -append
}
</powershell>

<persist>true</persist>